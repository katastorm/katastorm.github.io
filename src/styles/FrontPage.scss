@use "react-md" as *;

// this will include all the styles from react-md
@include react-md-utils;

/*
@font-face {
  font-family: "PoppinsB";
  src: url('../../fonts/Poppins/Poppins-Black.ttf')
}*/


.App {
  text-align: center;
}


.App-header {
  //background-color: #282c34;
  min-height: 100vh;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  font-size: calc(10px + 2vmin);
  color: white;
}



.Body-Position {
  padding-left: 40px;
  padding-right: 40px;
  width: 80%;
}

body {
  background-color: rgba($color: #000, $alpha: 0);

}

.Body {

  text-align: left;
  align-items: left;
  justify-content: left;


  background-color: #181820;

  //min-height: 100vh; espace pour le footer & header
  min-height: 85vh;

  padding-bottom: 5vh;
  overflow-x: hidden;
}





.BoxArea {

  width: 100%;

  display: flex;
  flex-direction: row;
  flex-wrap: wrap;

  align-items: center;
  justify-content: center;

  padding-left: 2%;
  padding-right: 2%;
}



.ProjectBox {
  box-sizing: border-box;
  padding: 5px;

  margin-left: 2%;
  margin-right: 2%;

  margin-bottom: 4vh;

  border: 2px solid #fff;


  overflow: hidden;
  background: #fff;

  cursor: pointer;


  position: relative;

  width: 25%;
  min-width: 80px;
  max-width: 280px;

  aspect-ratio: 0.75;



  display: flex;
  flex-direction: row;
  align-items: center;
  justify-content: center;

  transition: all 0.3s ease;

}





@media screen and (max-width: 1200px) {

  .Body-Position {
    width: 100%;
  }

  .BoxArea {
    padding-left: 0%;
    padding-right: 0%;
  }

  .ProjectBox {
    margin: 8px;
    padding: 2px;

    width: 40%;
    min-width: 80px;
    max-width: 220px;
  }


  table {
    width: 100%;
  }

}





.ProjectTitle {
  // font-weight: 900;
  -webkit-text-stroke: 0.05em #000;
  font-family: PoppinsB;
  text-shadow: rgba($color: #000, $alpha: 0.7) 4px 4px 0px;

  font-size: 1em;
  font-weight: 700;
  position: absolute;
  user-select: none;
  /* transform: translateY(calc(150px));*/
  transform: translateY(0%);

  z-index: 10;

  padding: 1vh;
  text-align: center;
}


img {
  max-width: 100%;
  display: block;
  margin: auto;
}

.ProjectBox img {
  object-fit: cover;
  width: 100%;
  height: 100%;
}





.img-zoom-in img,
.img-zoom-in .ProjectTitle {
  transition: all .2s ease-in-out;
  -webkit-transition: all .2s ease-in-out;
  -moz-transition: all .2s ease-in-out;
  -ms-transition: all .2s ease-in-out;
  -o-transition: all .2s ease-in-out;
}

.img-zoom-in img {
  //filter: grayscale(100%);
  filter: sepia(100%) saturate(500%) brightness(70%) hue-rotate(45deg);
}


.img-zoom-in:hover img {
  transform: scale(1.05);
  -webkit-transform: scale(1.05);
  -moz-transform: scale(1.05);
  -ms-transform: scale(1.05);
  -o-transform: scale(1.05);

  filter: sepia(0%) saturate(100%) brightness(100%) hue-rotate(0deg) grayscale(0%);

}


.img-zoom-in:hover .ProjectTitle {
  transform: translateY(-10px);
}

.img-zoom-in:hover .scanlines,
.img-zoom-in:hover .movingRefreshScanline {
  opacity: 0%;
}












.scanlines {
  overflow: hidden;
}



.scanlines::before {
  content: "";
  position: absolute;
  width: 100%;
  height: 150%;
  margin-top: -30px;
  top: 0;
  left: 0;
  opacity: 30%;

  transition: opacity 0.3s linear;


  /*
  background: repeating-linear-gradient(
    to bottom,
    transparent 0%,
    rgba(0, 150, 0, 0.5) .5%,
    transparent 1%
  );*/

  background-image: url("../../public/transparent_gradient.png");

  animation: fudge 3s linear infinite;
}


@keyframes fudge {
  from {
    transform: translate(0px, 0px);
  }

  to {
    transform: translate(0px, -30px);
  }
}




@keyframes refreshScan {
  0% {
    transform: translateY(-1000px);
  }

  100% {
    transform: translateY(100px);
  }
}


.movingRefreshScanline {
  float: left;
  width: 200%;
  height: 100px;
  z-index: 8;
  background: linear-gradient(0deg, rgba(0, 0, 0, 0) 0, rgba(255, 255, 255, .4) 10%, rgba(0, 0, 0, .0) 100%);
  opacity: 0.5;
  position: absolute;
  bottom: 0%;
  transition: opacity 0.3s linear;



  animation: refreshScan 7s linear infinite;
  animation-name: refreshScan;
  animation-duration: 7s;
  animation-timing-function: linear;
  animation-delay: 0s;
  animation-iteration-count: infinite;
  animation-direction: normal;
  animation-fill-mode: none;
  animation-play-state: running;

}




h1 {
  margin-top: 5vh;
  margin-bottom: 1vh;
  text-align: center;
  font-size: 2em;
  font-weight: bold;
}

h2 {
  margin-top: 5vh;
  margin-bottom: 1vh;
  font-size: 1.1em;
  //font-weight: bold;
  color: #8596e0;
}

h3 {
  //margin-top: 2vh;
  margin-bottom: 1vh;
  font-size: .8em;

}







p,
li,
form {
  font-size: large;
  text-justify: inter-word;
}

//Les listes à choix qui sont aprés les P, leur espacement est nul! on les monte un petit peu
.ReactMarkdown ul{
  transform: translate(0px, -01rem)
}

.ReactMarkdown li{  
  margin-left: 20px !important;
}


//Pour les zones entourés de **
em {
color: #8596e0;
}


#TitleImage{
  margin: auto;
  margin-top: 5vh;
  display: block;
  width: 60%;
//image-rendering: pixelated;

}

.ReactMarkdown{
  overflow: hidden;
}


.ReactMarkdown img,
.ReactMarkdown video,
.ReactMarkdown iframe {
  margin: auto;
  margin-bottom: 2.5vh;
  margin-top: 2.5vh;
  display: block;
  max-height: 60vh;
  max-width: 100%;
}


/*Pour les caption en dessous des images et des .imagegroup; utiliser *caption* juste aprés l'image ou la video*/
.ReactMarkdown img+em,
.ReactMarkdown iframe+em,
.ReactMarkdown video+em,

.ReactMarkdown *:has(> .imagegroup)+em,//Tous les EM qui suivent les imageGroup
.ReactMarkdown *:has(> .imagegroup)+p>em{
display: block;
  text-align: center;
  color: #fff;
  opacity: 0.6;
}


/*Fonctionne tant qu'il y a la place*/
@media screen and (min-width: 800px) {

.ReactMarkdown *:has(> .imagegroup){ //Tous les parents des imageGroup
  display: flex;
  justify-content: center;
  align-items: center;
  gap: 30px
}

.ReactMarkdown *:has(> .imagegroup) img {  //Tous les images à coté des imageGroup
  display: flex;
  max-width: 50%;
  max-height: 40vh;
  width: auto;
}

}



#popover-basic img {
  display: block;
  max-width: 90%;
  margin: auto;
  margin-top: 1vh;
  box-shadow: 0px 0px 12px 1px rgba(0, 0, 0, .3);
}










/* The switch - the box around the slider */
.switch {
  position: relative;
  display: inline-block;
  width: 54px;
  height: 28px;
}

/* Hide default HTML checkbox */
.switch input {
  opacity: 0;
  width: 0;
  height: 0;
}

/* The slider */
.slider {
  position: absolute;
  cursor: pointer;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background-color: #ccc;
  -webkit-transition: .4s;
  transition: .4s;
}

.slider:before {
  position: absolute;
  content: "";
  height: 20px;
  width: 20px;
  left: 4px;
  bottom: 4px;
  background-color: white;
  -webkit-transition: .4s;
  transition: .4s;
}

input:checked+.slider {
  background-color: #2196F3;
}

input:focus+.slider {
  box-shadow: 0 0 1px #2196F3;
}

input:checked+.slider:before {
  -webkit-transform: translateX(26px);
  -ms-transform: translateX(26px);
  transform: translateX(26px);
}

/* Rounded sliders */
.slider.round {
  border-radius: 28px;
}

.slider.round:before {
  border-radius: 50%;
}






.background {
  position: fixed;
  height: 999%;
  width: 100%;
  top: 0;
  left: 0;
  z-index: -10;
}

.background img {
  width: 100%;

  image-rendering: optimizeSpeed;
  /* STOP SMOOTHING, GIVE ME SPEED  */
  image-rendering: -moz-crisp-edges;
  /* Firefox                        */
  image-rendering: -o-crisp-edges;
  /* Opera                          */
  image-rendering: -webkit-optimize-contrast;
  /* Chrome (and eventually Safari) */
  image-rendering: pixelated;
  /* Chrome */
  image-rendering: optimize-contrast;
  /* CSS3 Proposed                  */
  -ms-interpolation-mode: nearest-neighbor;
  /* IE8+                           */

  -webkit-user-drag: none;
  -khtml-user-drag: none;
  -moz-user-drag: none;
  -o-user-drag: none;
}